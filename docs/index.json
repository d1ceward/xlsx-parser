{"repository_name":"xlsx-parser","body":"# xlsx-parser (v1.2.0)\n![GitHub Workflow Status (event)](https://github.com/d1ceward/xlsx-parser/actions/workflows/main.yml/badge.svg?branch=master)\n[![GitHub issues](https://img.shields.io/github/issues/d1ceward/xlsx-parser)](https://github.com/d1ceward/xlsx-parser/issues)\n[![GitHub license](https://img.shields.io/github/license/d1ceward/xlsx-parser)](https://github.com/d1ceward/xlsx-parser/blob/master/LICENSE)\n\nCrystal wrapper for parsing .xlsx spreadsheets\n\n:rocket: Suggestions for new improvements are welcome in the issue tracker.\n\nNote: Work with Cystal versions `>= 0.36.0, < 2.0.0`\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     xlsx-parser:\n       github: d1ceward/xlsx-parser\n       version: 1.2.0\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n### With IO\n```crystal\nrequire \"xlsx-parser\"\n\nfile_io = File.new(\"./my_super_spreadsheet.xlsx\")\nbook = XlsxParser::Book.new(file_io)\n```\n\n### With file path\n```crystal\nrequire \"xlsx-parser\"\n\nbook = XlsxParser::Book.new(\"./my_super_spreadsheet.xlsx\")\n```\n\n### Print rows content\n```crystal\n# Iterate on each row of the first sheet\nbook.sheets[0].rows.each do |row|\n  puts row #=> { \"A1\" => \"Col A Row 1\", \"B1\" => \"Col B Row 1\" }\nend\n\n# Second sheet\nbook.sheets[1]\n\nbook.close\n```\n\nDocumentation available here : https://d1ceward.github.io/xlsx-parser/\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/d1ceward/xlsx-parser. By contributing you agree to abide by the Code of Merit.\n\n1. Fork it (<https://github.com/d1ceward/xlsx-parser/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [d1ceward](https://github.com/d1ceward) - creator and maintainer\n","program":{"html_id":"xlsx-parser/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"xlsx-parser","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"xlsx-parser/XlsxParser","path":"XlsxParser.html","kind":"module","full_name":"XlsxParser","name":"XlsxParser","abstract":false,"locations":[{"filename":"src/xlsx-parser.cr","line_number":5,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser.cr#L5"},{"filename":"src/xlsx-parser/book.cr","line_number":4,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L4"},{"filename":"src/xlsx-parser/sheet.cr","line_number":1,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/sheet.cr#L1"}],"repository_name":"xlsx-parser","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.2.0\""}],"types":[{"html_id":"xlsx-parser/XlsxParser/Book","path":"XlsxParser/Book.html","kind":"class","full_name":"XlsxParser::Book","name":"Book","abstract":false,"superclass":{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"xlsx-parser/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/xlsx-parser/book.cr","line_number":5,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L5"}],"repository_name":"xlsx-parser","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"TIME_1900","name":"TIME_1900","value":"Time.utc(1899, 12, 30)"},{"id":"TIME_1904","name":"TIME_1904","value":"Time.utc(1904, 1, 1)"}],"namespace":{"html_id":"xlsx-parser/XlsxParser","kind":"module","full_name":"XlsxParser","name":"XlsxParser"},"constructors":[{"html_id":"new(file:IO|String,check_file_extension=true)-class-method","name":"new","doc":"Open given file/filename and store shared strings data","summary":"<p>Open given file/filename and store shared strings data</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"IO | String"},{"name":"check_file_extension","default_value":"true","external_name":"check_file_extension","restriction":""}],"args_string":"(file : IO | String, check_file_extension = true)","args_html":"(file : IO | String, check_file_extension = <span class=\"n\">true</span>)","location":{"filename":"src/xlsx-parser/book.cr","line_number":16,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L16"},"def":{"name":"new","args":[{"name":"file","external_name":"file","restriction":"IO | String"},{"name":"check_file_extension","default_value":"true","external_name":"check_file_extension","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(file, check_file_extension)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"base_time-instance-method","name":"base_time","doc":"Return and store base time given from workbookPr\nhttp://msdn.microsoft.com/en-us/library/ff530155(v=office.12).aspx","summary":"<p>Return and store base time given from workbookPr http://msdn.microsoft.com/en-us/library/ff530155(v=office.12).aspx</p>","abstract":false,"location":{"filename":"src/xlsx-parser/book.cr","line_number":76,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L76"},"def":{"name":"base_time","visibility":"Public","body":"@base_time || (@base_time = (begin\n  result = TIME_1900\n\n  workbook = XML.parse(@zip[\"xl/workbook.xml\"].open(&.gets_to_end))\n  (workbook.xpath_nodes(\"//*[name()='workbookPr']\")).each do |workbook_pr|\n    if workbook_pr.try() do |__arg4|\n      __arg4.attributes[\"date1904\"]?\n    end.try(&.content) =~ (/true|1/i)\n    else\n      next\n    end\n\n    result = TIME_1904\n    break\n  end\n\n  result\nend))"},"external_var":false},{"html_id":"close-instance-method","name":"close","doc":"Close previously opened given file/filename","summary":"<p>Close previously opened given file/filename</p>","abstract":false,"location":{"filename":"src/xlsx-parser/book.cr","line_number":66,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L66"},"def":{"name":"close","visibility":"Public","body":"@zip.close"},"external_var":false},{"html_id":"shared_strings:Array(String)-instance-method","name":"shared_strings","abstract":false,"location":{"filename":"src/xlsx-parser/book.cr","line_number":8,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L8"},"def":{"name":"shared_strings","return_type":"Array(String)","visibility":"Public","body":"@shared_strings"},"external_var":false},{"html_id":"sheet(name:String):Sheet|Nil-instance-method","name":"sheet","doc":"Return sheet with given name","summary":"<p>Return sheet with given name</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Sheet | Nil","args_html":"(name : String) : <a href=\"../XlsxParser/Sheet.html\">Sheet</a> | Nil","location":{"filename":"src/xlsx-parser/book.cr","line_number":61,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L61"},"def":{"name":"sheet","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Sheet | ::Nil","visibility":"Public","body":"sheets.find do |sheet|\n  sheet.name == name\nend"},"external_var":false},{"html_id":"sheet_exists?(name:String)-instance-method","name":"sheet_exists?","doc":"Return true if sheet with given name exists otherwise return false","summary":"<p>Return true if sheet with given name exists otherwise return false</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/xlsx-parser/book.cr","line_number":56,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L56"},"def":{"name":"sheet_exists?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"sheets.any? do |sheet|\n  sheet.name == name\nend"},"external_var":false},{"html_id":"sheets-instance-method","name":"sheets","doc":"Return a array of sheets","summary":"<p>Return a array of sheets</p>","abstract":false,"location":{"filename":"src/xlsx-parser/book.cr","line_number":40,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L40"},"def":{"name":"sheets","visibility":"Public","body":"workbook = XML.parse(@zip[\"xl/workbook.xml\"].open(&.gets_to_end))\nsheets_nodes = workbook.xpath_nodes(\"//*[name()='sheet']\")\n\nrels = XML.parse(@zip[\"xl/_rels/workbook.xml.rels\"].open(&.gets_to_end))\n\n@sheets = sheets_nodes.map do |sheet|\n  sheet_file = rels.xpath_string(\"string(//*[name()='Relationship' and contains(@Id,'#{sheet[\"id\"]}')]/@Target)\")\n\n  Sheet.new(self, sheet_file, sheet[\"name\"])\nend\n"},"external_var":false},{"html_id":"style_types-instance-method","name":"style_types","abstract":false,"location":{"filename":"src/xlsx-parser/book.cr","line_number":70,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L70"},"def":{"name":"style_types","visibility":"Public","body":"@style_types || (@style_types = Styles::Parser.call(self))"},"external_var":false},{"html_id":"zip:Compress::Zip::File-instance-method","name":"zip","abstract":false,"location":{"filename":"src/xlsx-parser/book.cr","line_number":6,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/book.cr#L6"},"def":{"name":"zip","return_type":"Compress::Zip::File","visibility":"Public","body":"@zip"},"external_var":false}]},{"html_id":"xlsx-parser/XlsxParser/Sheet","path":"XlsxParser/Sheet.html","kind":"class","full_name":"XlsxParser::Sheet","name":"Sheet","abstract":false,"superclass":{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"xlsx-parser/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/xlsx-parser/sheet.cr","line_number":5,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/sheet.cr#L5"}],"repository_name":"xlsx-parser","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"xlsx-parser/XlsxParser","kind":"module","full_name":"XlsxParser","name":"XlsxParser"},"doc":"Represents a sheet in an Excel workbook.\n\nThe `Sheet` class provides methods to read and manipulate data in a sheet.","summary":"<p>Represents a sheet in an Excel workbook.</p>","constructors":[{"html_id":"new(book:Book,file:String,name:String)-class-method","name":"new","doc":"Initializes a new instance of the `Sheet` class.","summary":"<p>Initializes a new instance of the <code><a href=\"../XlsxParser/Sheet.html\">Sheet</a></code> class.</p>","abstract":false,"args":[{"name":"book","external_name":"book","restriction":"Book"},{"name":"file","external_name":"file","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(book : Book, file : String, name : String)","args_html":"(book : <a href=\"../XlsxParser/Book.html\">Book</a>, file : String, name : String)","location":{"filename":"src/xlsx-parser/sheet.cr","line_number":16,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/sheet.cr#L16"},"def":{"name":"new","args":[{"name":"book","external_name":"book","restriction":"Book"},{"name":"file","external_name":"file","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(book, file, name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"name:String-instance-method","name":"name","doc":"The name of the sheet.","summary":"<p>The name of the sheet.</p>","abstract":false,"location":{"filename":"src/xlsx-parser/sheet.cr","line_number":10,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/sheet.cr#L10"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"node:XML::Reader-instance-method","name":"node","doc":"The XML reader for the sheet.","summary":"<p>The XML reader for the sheet.</p>","abstract":false,"location":{"filename":"src/xlsx-parser/sheet.cr","line_number":7,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/sheet.cr#L7"},"def":{"name":"node","return_type":"XML::Reader","visibility":"Public","body":"@node"},"external_var":false},{"html_id":"rows-instance-method","name":"rows","doc":"Returns an iterator that yields a hash per row, including the cell ids and values.","summary":"<p>Returns an iterator that yields a hash per row, including the cell ids and values.</p>","abstract":false,"location":{"filename":"src/xlsx-parser/sheet.cr","line_number":21,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/sheet.cr#L21"},"def":{"name":"rows","visibility":"Public","body":"Iterator.of do\n  row = nil\n  row_index = nil\n  cell = nil\n  cell_type = nil\n  cell_style_idx = nil\n\n  loop do\n    if @node.read\n    else\n      break\n    end\n    if @node.name == \"row\"\n      if @node.node_type == XML::Reader::Type::ELEMENT\n        row = {} of String => Type\n        row_index = node[\"r\"]?\n      else\n        row = inner_padding(row, row_index, cell)\n        break\n      end\n    else\n      if (@node.name == \"c\") && (@node.node_type == XML::Reader::Type::ELEMENT)\n        cell_type = node[\"t\"]?\n        cell_style_idx = node[\"s\"]?.try(&.to_i)\n        cell = node[\"r\"]?\n      else\n        if (((@node.name == \"v\") && (@node.node_type == XML::Reader::Type::ELEMENT)) && row) && cell\n          row[cell] = convert(@node.read_inner_xml, cell_type, cell_style_idx)\n        end\n      end\n    end\n  end\n\n  row || Iterator.stop\nend"},"external_var":false}],"types":[{"html_id":"xlsx-parser/XlsxParser/Sheet/Type","path":"XlsxParser/Sheet/Type.html","kind":"alias","full_name":"XlsxParser::Sheet::Type","name":"Type","abstract":false,"locations":[{"filename":"src/xlsx-parser/sheet.cr","line_number":13,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/sheet.cr#L13"}],"repository_name":"xlsx-parser","program":false,"enum":false,"alias":true,"aliased":"(Bool | Float64 | Int32 | String | Time)","aliased_html":"Bool | Float64 | Int32 | String | Time","const":false,"namespace":{"html_id":"xlsx-parser/XlsxParser/Sheet","kind":"class","full_name":"XlsxParser::Sheet","name":"Sheet"},"doc":"The possible types of cell values.","summary":"<p>The possible types of cell values.</p>"}]},{"html_id":"xlsx-parser/XlsxParser/Styles","path":"XlsxParser/Styles.html","kind":"module","full_name":"XlsxParser::Styles","name":"Styles","abstract":false,"locations":[{"filename":"src/xlsx-parser/styles.cr","line_number":8,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/styles.cr#L8"},{"filename":"src/xlsx-parser/styles/converter.cr","line_number":1,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/styles/converter.cr#L1"},{"filename":"src/xlsx-parser/styles/parser.cr","line_number":1,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/styles/parser.cr#L1"}],"repository_name":"xlsx-parser","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"NumFmtMap","name":"NumFmtMap","value":"{0 => :string, 1 => :fixnum, 2 => :float, 3 => :fixnum, 4 => :float, 5 => :unsupported, 6 => :unsupported, 7 => :unsupported, 8 => :unsupported, 9 => :percentage, 10 => :percentage, 11 => :bignum, 12 => :unsupported, 13 => :unsupported, 14 => :date, 15 => :date, 16 => :date, 17 => :date, 18 => :time, 19 => :time, 20 => :time, 21 => :time, 22 => :date_time, 37 => :unsupported, 38 => :unsupported, 39 => :unsupported, 40 => :unsupported, 45 => :time, 46 => :time, 47 => :time, 48 => :bignum, 49 => :unsupported}"}],"namespace":{"html_id":"xlsx-parser/XlsxParser","kind":"module","full_name":"XlsxParser","name":"XlsxParser"},"doc":"Module XlsxParser::Styles contains a map of non-custom numFmtId to casting symbol.\n\nThe NumFmtMap is a hash that maps the numFmtId to the corresponding casting symbol.\nThe casting symbols represent the data type that should be used when parsing the cell value.","summary":"<p>Module XlsxParser::Styles contains a map of non-custom numFmtId to casting symbol.</p>","types":[{"html_id":"xlsx-parser/XlsxParser/Styles/Converter","path":"XlsxParser/Styles/Converter.html","kind":"class","full_name":"XlsxParser::Styles::Converter","name":"Converter","abstract":false,"superclass":{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"xlsx-parser/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/xlsx-parser/styles/converter.cr","line_number":2,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/styles/converter.cr#L2"}],"repository_name":"xlsx-parser","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DATE_TYPES","name":"DATE_TYPES","value":"[:date, :time, :date_time] of ::Symbol"}],"namespace":{"html_id":"xlsx-parser/XlsxParser/Styles","kind":"module","full_name":"XlsxParser::Styles","name":"Styles"},"class_methods":[{"html_id":"call(value:String,type:String|Nil,style:Symbol|Nil,book:Book)-class-method","name":"call","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"type","external_name":"type","restriction":"String | ::Nil"},{"name":"style","external_name":"style","restriction":"Symbol | ::Nil"},{"name":"book","external_name":"book","restriction":"Book"}],"args_string":"(value : String, type : String | Nil, style : Symbol | Nil, book : Book)","args_html":"(value : String, type : String | Nil, style : Symbol | Nil, book : <a href=\"../../XlsxParser/Book.html\">Book</a>)","location":{"filename":"src/xlsx-parser/styles/converter.cr","line_number":6,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/styles/converter.cr#L6"},"def":{"name":"call","args":[{"name":"value","external_name":"value","restriction":"String"},{"name":"type","external_name":"type","restriction":"String | ::Nil"},{"name":"style","external_name":"style","restriction":"Symbol | ::Nil"},{"name":"book","external_name":"book","restriction":"Book"}],"visibility":"Public","body":"if type.nil? || ((type == \"n\") && (DATE_TYPES.includes?(style)))\n  type = style\nend\n\ncase type\nwhen \"s\"\n  book.shared_strings[value.to_i]\nwhen \"n\"\n  value.to_f\nwhen \"b\"\n  value.to_i == 1\nwhen :string\n  value\nwhen :unsupported\n  convert_unknown(value)\nwhen :fixnum\n  value.to_i\nwhen :float, :percentage\n  value.to_f\nwhen :time, :date, :date_time\n  convert_time(value, book)\nelse\n  convert_unknown(value)\nend\n"},"external_var":false}]},{"html_id":"xlsx-parser/XlsxParser/Styles/Parser","path":"XlsxParser/Styles/Parser.html","kind":"class","full_name":"XlsxParser::Styles::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"xlsx-parser/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"xlsx-parser/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/xlsx-parser/styles/parser.cr","line_number":2,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/styles/parser.cr#L2"}],"repository_name":"xlsx-parser","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"xlsx-parser/XlsxParser/Styles","kind":"module","full_name":"XlsxParser::Styles","name":"Styles"},"class_methods":[{"html_id":"call(book:Book):Array(Symbol|Nil)-class-method","name":"call","abstract":false,"args":[{"name":"book","external_name":"book","restriction":"Book"}],"args_string":"(book : Book) : Array(Symbol | Nil)","args_html":"(book : <a href=\"../../XlsxParser/Book.html\">Book</a>) : Array(Symbol | Nil)","location":{"filename":"src/xlsx-parser/styles/parser.cr","line_number":3,"url":"https://github.com/d1ceward/xlsx-parser/blob/38c6c8f73df1289acaf1bce7187ca80be8d66f88/src/xlsx-parser/styles/parser.cr#L3"},"def":{"name":"call","args":[{"name":"book","external_name":"book","restriction":"Book"}],"return_type":"Array(Symbol | Nil)","visibility":"Public","body":"if (styles_file = book.zip[\"xl/styles.xml\"]?)\nelse\n  return [] of Symbol | ::Nil\nend\n\nstyles = XML.parse(styles_file.open(&.gets_to_end))\ncustom_style_types = parse_custom_style_types(styles)\nstyles_nodes = styles.xpath_nodes(\"//*[name()='styleSheet']//*[name()='cellXfs']//*[name()='xf']\")\n\nstyles_nodes.map do |xstyle|\n  if (num_fmt_id = xstyle.attributes[\"numFmtId\"]?.try(&.content).try(&.to_i))\n  else\n    next\n  end\n\n  NumFmtMap[num_fmt_id]? || custom_style_types[num_fmt_id]\nend\n"},"external_var":false}]}]}]}]}}